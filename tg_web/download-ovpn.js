const fs = require("fs-extra");
const path = require("path");
const fetch = require("node-fetch");
const cheerio = require("cheerio");
const tesseract = require("tesseract.js");
const puppeteer = require("puppeteer");

const GITHUB_REPO = "https://api.github.com/repos/Zoult/.ovpn/contents";
const DOWNLOAD_DIR = path.join(process.cwd(), "vpn-config");
const ALLOWED_COUNTRIES = ["usa", "germany"];

// üîé –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
async function getConfigUrls() {
  try {
    const response = await globalThis.fetch(GITHUB_REPO);
    if (!response.ok)
      throw new Error(`GitHub API error: ${response.statusText}`);

    const countries = await response.json();
    const filteredCountries = countries.filter((country) =>
      ALLOWED_COUNTRIES.some((filter) =>
        country.name.toLowerCase().includes(filter),
      ),
    );

    for (const country of filteredCountries) {
      console.log(`üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω—É: ${country.name}`);
      await processCountryConfigs(country.git_url, country.name);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", error);
  }
}

// üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –ø–∞—Ä–æ–ª–∏
async function processCountryConfigs(gitUrl, countryName) {
  try {
    const response = await globalThis.fetch(gitUrl);
    const countryConfig = await response.json();

    const config = countryConfig.tree.find(
      (file) =>
        file.type === "blob" &&
        file.path.startsWith("VBK") &&
        file.path.endsWith(".ovpn"),
    );
    const passwordFile = countryConfig.tree.find(
      (file) => file.type === "blob" && file.path.includes("VBK password.url"),
    );

    if (config) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥: ${config.path}`);
      await downloadConfig(config.url, config.path);
    } else {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è ${countryName}`);
    }

    if (passwordFile) {
      console.log(`üîë –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º: ${passwordFile.path}`);
      await downloadAndExtractPassword(passwordFile.url, countryName);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω—ã:", error);
  }
}

// üì• –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
async function downloadConfig(configUrl, fileName) {
  try {
    const response = await globalThis.fetch(configUrl);
    const configData = await response.json();

    await fs.ensureDir(DOWNLOAD_DIR);
    const filePath = path.join(DOWNLOAD_DIR, fileName);

    fs.writeFileSync(
      filePath,
      Buffer.from(configData.content, "base64"),
      "utf-8",
    );
    console.log(`üìÇ –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fileName}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞:", error);
  }
}

// üîì –ò–∑–≤–ª–µ–∫–∞–µ–º URL –ø–∞—Ä–æ–ª—è –∏ –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
async function downloadAndExtractPassword(passwordUrl, countryName) {
  try {
    const response = await globalThis.fetch(passwordUrl);
    const passwordData = await response.json();
    const decodedContent = Buffer.from(passwordData.content, "base64").toString(
      "utf-8",
    );

    const match = decodedContent.match(/URL=(.+)/);
    if (!match) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞—Ä–æ–ª—å –¥–ª—è ${countryName}`);
      return;
    }

    const passwordPageUrl = match[1];
    console.log(`üåê –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Ä–æ–ª—è: ${passwordPageUrl}`);

    const password = await parsePasswordFromPage(passwordPageUrl);
    if (password) {
      console.log(`üîë –ù–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è ${countryName}: ${password}`);
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–æ–ª—å.`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:", error);
  }
}

// üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é Puppeteer
async function parsePasswordFromPage(url) {
  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();

  try {
    await page.goto(url, { waitUntil: "networkidle2" });

    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–∞—Ä–æ–ª–µ–º
    await page.waitForSelector("li img.pwdimg", { timeout: 5000 });

    // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageUrl = await page.evaluate(() => {
      const img = document.querySelector("li img.pwdimg");
      return img ? img.src : null;
    });

    await browser.close();

    if (!imageUrl) {
      console.log("‚ùå –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
      return null;
    }

    const fullImageUrl = new URL(imageUrl, url).href;
    console.log(`üì∑ –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è: ${fullImageUrl}`);

    return await extractTextFromImage(fullImageUrl);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", error);
    await browser.close();
    return null;
  }
}

// üß† –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OCR)
async function extractTextFromImage(imageUrl) {
  try {
    const { data } = await tesseract.recognize(imageUrl);
    return data.text.trim();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:", error);
    return null;
  }
}

// üöÄ –ó–∞–ø—É—Å–∫
(async function main() {
  await getConfigUrls();
})();
